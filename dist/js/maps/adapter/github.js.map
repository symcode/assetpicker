{"version":3,"sources":["adapter/node_modules/browser-pack/_prelude.js","adapter/src/js/adapter/github/index.js","adapter/github.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","AssetPickerAdapterGithub","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","translations","description","en","de","http","base","data","token","created","appConfig","github","localStorage","getItem","watch","setItem","removeItem","events","load-items","tree","get","config","username","repository","item","id","headers","Authorization","then","response","items","map","file","createItem","path","replace","name","type","links","open","html_url","bind","sortItems","$dispatch","createToken","methods","login","password","callback","baseUrl","document","location","protocol","host","fingerprint","options","btoa","createAuthorization","post","note","scopes"],"mappings":"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","file":"../../adapter/github.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\r\n    translations: {\r\n        description: {\r\n            en: 'Repository {{config.username}}/{{config.repository}} on GitHub',\r\n            de: 'Repository {{config.username}}/{{config.repository}} auf GitHub'\r\n        }\r\n    },\r\n    http: {\r\n        base: 'https://api.github.com'\r\n    },\r\n    data: function() {\r\n        return {\r\n            // this.appConfig is not yet available here, so have to initialize it on created\r\n            token: null\r\n        };\r\n    },\r\n    created: function () {\r\n        this.token = this.appConfig.github.token || localStorage.getItem('github_token')\r\n    },\r\n    watch: {\r\n        token: function (token) {\r\n            if (token) {\r\n                localStorage.setItem('github_token', token);\r\n            } else if (localStorage.getItem('github_token')) {\r\n                localStorage.removeItem('github_token')\r\n            }\r\n        }\r\n    },\r\n    events: {\r\n        'load-items': function (tree) {\r\n            if (this.token) {\r\n                this.http.get(\r\n                    'repos/' + this.config.username + '/' + this.config.repository + '/contents/' + (tree.item ? tree.item.id : ''),\r\n                    {\r\n                        headers: {\r\n                            Authorization: 'token ' + this.token\r\n                        }\r\n                    }\r\n                ).then(\r\n                    function(response) {\r\n                        var items = response.data.map((function (file) {\r\n                            return this.createItem({\r\n                                id: file.path.replace(/^\\/+/, ''),\r\n                                name: file.name,\r\n                                type: file.type,\r\n                                data: file,\r\n                                links: {\r\n                                    open: file.html_url\r\n                                }\r\n                            });\r\n                        }).bind(this));\r\n                        tree.items = this.sortItems(items);\r\n                    },\r\n                    (function () {\r\n                        this.token = null;\r\n                        this.$dispatch('load-items', tree);\r\n                    }).bind(this)\r\n                );\r\n            } else {\r\n                this.createToken().then((function () {\r\n                    this.$dispatch('load-items', tree);\r\n                }).bind(this));\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        createToken: function () {\r\n            return this.login(function (username, password, callback) {\r\n                var baseUrl = document.location.protocol + '//' + document.location.host,\r\n                    fingerprint = 'netresearch-assetpicker-github-' + baseUrl,\r\n                    options = {\r\n                        headers: {\r\n                            Authorization: 'Basic ' + btoa(username + ':' + password)\r\n                        }\r\n                    },\r\n                    createAuthorization = function () {\r\n                        this.http.post(\r\n                            'authorizations',\r\n                            {\r\n                                note: 'Repository access for ' + this.t('header.title') + ' at ' + baseUrl,\r\n                                scopes: ['public_repo', 'repo'],\r\n                                fingerprint: fingerprint\r\n                            },\r\n                            options\r\n                        ).then(\r\n                            function (response) {\r\n                                this.token = response.data.token;\r\n                                if (!this.token) {\r\n                                    throw 'Could not find expected this.token';\r\n                                }\r\n                                callback(true);\r\n                            }.bind(this)\r\n                        )\r\n                    }.bind(this);\r\n\r\n                this.http.get('authorizations', options).then(\r\n                    (function(response) {\r\n                        for (var i = 0, l = response.data.length; i < l; i++) {\r\n                            if (response.data[i].fingerprint === fingerprint) {\r\n                                this.http.delete('authorizations/' + response.data[i].id, options).then(createAuthorization);\r\n                                return;\r\n                            }\r\n                        }\r\n                        createAuthorization();\r\n                    }).bind(this),\r\n                    function () {\r\n                        callback(false);\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n};\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.AssetPickerAdapterGithub = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\r\n    translations: {\r\n        description: {\r\n            en: 'Repository {{config.username}}/{{config.repository}} on GitHub',\r\n            de: 'Repository {{config.username}}/{{config.repository}} auf GitHub'\r\n        }\r\n    },\r\n    http: {\r\n        base: 'https://api.github.com'\r\n    },\r\n    data: function() {\r\n        return {\r\n            // this.appConfig is not yet available here, so have to initialize it on created\r\n            token: null\r\n        };\r\n    },\r\n    created: function () {\r\n        this.token = this.appConfig.github.token || localStorage.getItem('github_token')\r\n    },\r\n    watch: {\r\n        token: function (token) {\r\n            if (token) {\r\n                localStorage.setItem('github_token', token);\r\n            } else if (localStorage.getItem('github_token')) {\r\n                localStorage.removeItem('github_token')\r\n            }\r\n        }\r\n    },\r\n    events: {\r\n        'load-items': function (tree) {\r\n            if (this.token) {\r\n                this.http.get(\r\n                    'repos/' + this.config.username + '/' + this.config.repository + '/contents/' + (tree.item ? tree.item.id : ''),\r\n                    {\r\n                        headers: {\r\n                            Authorization: 'token ' + this.token\r\n                        }\r\n                    }\r\n                ).then(\r\n                    function(response) {\r\n                        var items = response.data.map((function (file) {\r\n                            return this.createItem({\r\n                                id: file.path.replace(/^\\/+/, ''),\r\n                                name: file.name,\r\n                                type: file.type,\r\n                                data: file,\r\n                                links: {\r\n                                    open: file.html_url\r\n                                }\r\n                            });\r\n                        }).bind(this));\r\n                        tree.items = this.sortItems(items);\r\n                    },\r\n                    (function () {\r\n                        this.token = null;\r\n                        this.$dispatch('load-items', tree);\r\n                    }).bind(this)\r\n                );\r\n            } else {\r\n                this.createToken().then((function () {\r\n                    this.$dispatch('load-items', tree);\r\n                }).bind(this));\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        createToken: function () {\r\n            return this.login(function (username, password, callback) {\r\n                var baseUrl = document.location.protocol + '//' + document.location.host,\r\n                    fingerprint = 'netresearch-assetpicker-github-' + baseUrl,\r\n                    options = {\r\n                        headers: {\r\n                            Authorization: 'Basic ' + btoa(username + ':' + password)\r\n                        }\r\n                    },\r\n                    createAuthorization = function () {\r\n                        this.http.post(\r\n                            'authorizations',\r\n                            {\r\n                                note: 'Repository access for ' + this.t('header.title') + ' at ' + baseUrl,\r\n                                scopes: ['public_repo', 'repo'],\r\n                                fingerprint: fingerprint\r\n                            },\r\n                            options\r\n                        ).then(\r\n                            function (response) {\r\n                                this.token = response.data.token;\r\n                                if (!this.token) {\r\n                                    throw 'Could not find expected this.token';\r\n                                }\r\n                                callback(true);\r\n                            }.bind(this)\r\n                        )\r\n                    }.bind(this);\r\n\r\n                this.http.get('authorizations', options).then(\r\n                    (function(response) {\r\n                        for (var i = 0, l = response.data.length; i < l; i++) {\r\n                            if (response.data[i].fingerprint === fingerprint) {\r\n                                this.http.delete('authorizations/' + response.data[i].id, options).then(createAuthorization);\r\n                                return;\r\n                            }\r\n                        }\r\n                        createAuthorization();\r\n                    }).bind(this),\r\n                    function () {\r\n                        callback(false);\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n};\r\n\n},{}]},{},[1])(1)\n});\n\n"]}
{"version":3,"sources":["adapter/node_modules/browser-pack/_prelude.js","adapter/src/js/adapter/symcodecloud/index.js","adapter/symcodecloud.js","adapter/src/js/adapter/symcodecloud/template.html"],"names":["f","exports","module","define","amd","g","window","global","self","this","AssetPickerAdapterSymcodecloud","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","translations","description","en","de","template","apikey","http","options","base","config","url","replace","data","category","search","items","results","extensions","watch","appConfig.pick","handler","oldTerms","assembleTerms","newTerms","hash","pop","loadAssets","immediate","dateFormat","methods","terms","pushTerm","field","operator","value","push","id","join","query","JSON","stringify","result","Array","prototype","apply","total","loading","page","pages","$promise","resolve","categories","fulltext","forEach","term","get","headers","then","response","parseInt","current_page","page_count","asset","ext","type","match","hasOwnProperty","extension","original_name","undefined","item","createItem","name","title","created","parseDate","created_at","modified","changed_at","thumbnail","media_thumb_url","links","open","download","media_file_url","bind","setupLogin","loginCallback","that","loginFunc","username","password","callback","status","json","cliUsername","cliPassword","login","loadCategories","tree","catId","map","events","select-item","$parent","$dispatch","load-more-items","sword","category-load-items","category-select-item","./template.html","2"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,+BAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCAAC,EAAAD,SACA0B,cACAC,aACAC,GAAA,wBACAC,GAAA,0BAGAC,SAAAZ,EAAA,mBACAa,OAAA,GACAC,KAAA,WACA,GACAC,IACAC,KAAA1B,KAAA2B,OAAAC,IAAAC,QAAA,OAAA,IAAA,OAEA,OAAAJ,IAEAK,KAAA,WACA,OACAC,SAAA,KACAC,OAAA,KACAC,MAAA,KACAC,WACAC,WAAA,OAGAC,OACAC,kBACAC,QAAA,SAAAX,GAEA,GAAAY,GAAAvC,KAAAwC,eACAxC,MAAAmC,WAAAR,EAAAQ,UACA,IAAAM,GAAAzC,KAAAwC,eACA,IAAAD,EAAAG,OAAAD,EAAAC,MAAA1C,KAAAkC,QAAAK,EAAAG,MAAA,CAEA,IADA,GAAAT,GAAAjC,KAAAkC,QAAAK,EAAAG,MAAAT,MACAA,EAAAjB,OAAA,GACAiB,EAAAU,KAEA3C,MAAA4C,WAAAX,KAGAY,WAAA,IAGAC,WAAA,sBACAC,SACAP,cAAA,WACA,GAAAQ,MACAC,EAAA,SAAAC,EAAAC,EAAAC,GACAJ,EAAAK,MAAAH,MAAAA,EAAAC,SAAAA,EAAAC,MAAAA,IAcA,OAZApD,MAAA+B,UACAkB,EAAA,WAAA,QAAAjD,KAAA+B,SAAAuB,IAEAtD,KAAAgC,QACAiB,EAAA,cAAA,WAAAjD,KAAAgC,QAEAhC,KAAAmC,YAAAnC,KAAAmC,WAAAnB,QACAiC,EAAA,aAAA,UAAAjD,KAAAmC,WAAAoB,KAAA,MAEAP,EAAAhC,QACAiC,EAAA,KAAA,UAAA,KAEAD,GAEAJ,WAAA,SAAAX,GACA,GAAAe,GAAAhD,KAAAwC,gBACAgB,EAAAC,KAAAC,UAAAV,GACAW,EAAA3D,KAAAkC,QAAAsB,EACA,IAAAG,GAYA,GAPA1B,GAAA0B,EAAA1B,QAAAA,IACA2B,MAAAC,UAAAR,KAAAS,MAAA7B,EAAA0B,EAAA1B,OACAA,EAAA8B,MAAAJ,EAAA1B,MAAA8B,MACA9B,EAAA+B,QAAAL,EAAA1B,MAAA+B,QACA/B,EAAAuB,MAAAA,EACAG,EAAA1B,MAAAA,GAEA0B,EAAAM,OAAAN,EAAAO,MACA,MAAAlE,MAAAmE,SAAA,SAAAC,GACAA,EAAAT,SAbAA,IAAAM,KAAA,EAAAC,MAAA,EAAAjC,MAAAA,OACA0B,EAAA1B,MAAA8B,MAAAJ,EAAA1B,MAAA8B,OAAAJ,EAAA1B,MAAAjB,OACAhB,KAAAkC,QAAAsB,GAAAG,CAgBAA,GAAA1B,MAAA+B,SAAA,EACAL,EAAA1B,MAAAuB,MAAAA,CAEA,IAAAa,GAAA,GACAC,EAAA,EAEAtB,GAAAuB,QAAA,SAAAC,GACA,YAAAA,EAAAtB,QACAmB,EAAAG,EAAApB,OAEA,eAAAoB,EAAAtB,QACAoB,EAAAE,EAAApB,SAKApD,KAAAwB,KAAAiD,IACA,kBAAAd,EAAAM,KAAA,GAAA,gCAAAI,EAAA,qBAAAC,GACAI,SAAAnD,OAAAvB,KAAAuB,UACAoD,KAAA,SAAAC,GA2BA,MA1BAjB,GAAA1B,MAAAuB,QAAAA,IACAG,EAAAM,KAAAY,SAAAD,EAAA9C,KAAAgD,cACAnB,EAAAO,MAAAW,SAAAD,EAAA9C,KAAAiD,YACApB,EAAA1B,MAAA8B,MAAAc,SAAAD,EAAA9C,KAAAiC,OACAJ,EAAA1B,MAAA+B,SAAA,EACAY,EAAA9C,KAAAA,KAAAyC,QAAA,SAAAS,GACA,GAAAC,GAAAD,EAAAE,KAAAC,MAAA,UAAAH,EAAAI,eAAA,aAAAJ,EAAAK,WAAAL,EAAAM,cAAAH,MAAA,wBAAAxC,MAAA4C,OACAC,EAAAxF,KAAAyF,YACAnC,GAAA0B,EAAAtC,KACAc,MAAAA,EACA0B,KAAA,OACAQ,KAAAV,EAAAU,KACAC,MAAAX,EAAAU,KACAL,UAAAJ,EACAW,QAAA5F,KAAA6F,UAAAb,EAAAc,YACAC,SAAA/F,KAAA6F,UAAAb,EAAAgB,YACAC,UAAAjB,EAAAkB,gBAAArE,QAAA,OAAA,SAAA,eACAsE,OACAC,KAAApB,EAAAkB,gBAAA,eACAG,SAAArB,EAAAsB,gBAEAxE,KAAAkD,GAEArB,GAAA1B,MAAAoB,KAAAmC,IACAe,KAAAvG,QAEA2D,GACA4C,KAAAvG,QAEAwG,WAAA,SAAAC,GACA,GAAAC,GAAA1G,KACA2G,EAAA,SAAAC,EAAAC,EAAAC,GACAJ,EAAAlF,KAAAiD,IAAA,mBAAAmC,EAAA,aAAAC,GAAAlC,KACA,SAAAC,GACA,MAAAA,EAAAmC,QACAnC,EAAA9C,KAAA8C,EAAAoC,OACApC,EAAA9C,KAAAP,QACAmF,EAAAnF,OAAAqD,EAAA9C,KAAAP,OACAuF,GAAA,GACAL,EAAA7B,EAAA9C,KAAAP,UAGAmF,EAAA/E,OAAAsF,YAAA,KACAP,EAAA/E,OAAAuF,YAAA,KACAJ,GAAA,MAIAJ,EAAA/E,OAAAsF,YAAA,KACAP,EAAA/E,OAAAuF,YAAA,KACAJ,GAAA,MAMA9G,MAAA2B,OAAAsF,aAAAjH,KAAA2B,OAAAuF,YACAP,EAAA3G,KAAA2B,OAAAsF,YAAAjH,KAAA2B,OAAAuF,YAAA,cAEAlH,KAAAmH,MAAA,SAAAP,EAAAC,EAAAC,GACAH,EAAA3G,KAAA2B,OAAAsF,YAAAjH,KAAA2B,OAAAuF,YAAAJ,KACAP,KAAAvG,OAIAoH,eAAA,SAAAC,GACA,GAAAC,GAAA,CACAD,GAAA7B,MAAA6B,EAAA7B,KAAAlC,KACAgE,EAAAD,EAAA7B,KAAAlC,IAGAtD,KAAAwB,KAAAiD,IACA,mCAAA6C,GACA5C,SAAAnD,OAAAvB,KAAAuB,UACAoD,KAAA,SAAAC,GACAyC,EAAApF,MAAA2C,EAAA9C,KAAAA,KAAAyF,IAAA,SAAAxF,GACA,MAAA/B,MAAAyF,YACAnC,GAAAvB,EAAAuB,GACAoC,KAAA3D,EAAA2D,KACAR,KAAA,WACApD,KAAAC,KAEAwE,KAAAvG,WAIAwH,QACAC,cAAA,SAAAjC,GACA,GAAA,eAAAA,EAkBA,OAAA,CAjBAxF,MAAA+B,SAAA,KACA/B,KAAAgC,OAAA,IACA,IAAA0E,GAAA1G,IACA0G,GAAAnF,OAQAmF,EAAA9D,aAAA+B,KAAA,SAAAC,GACA8B,EAAAzE,MAAA2C,EAAA3C,MACAyE,EAAAgB,QAAAC,UAAA,cAAA3H,QATA0G,EAAAF,WAAA,WACAE,EAAA9D,aAAA+B,KAAA,SAAAC,GACA8B,EAAAzE,MAAA2C,EAAA3C,MACAyE,EAAAgB,QAAAC,UAAA,cAAA3H,WAaA4H,kBAAA,SAAA1F,GACA,GAAAwE,GAAA1G,IACA0G,GAAAnF,OAKAmF,EAAA9D,WAAAV,GAJAwE,EAAAF,WAAA,WACAE,EAAA9D,WAAAV,MAMAF,OAAA,SAAA6F,EAAA3F,GACA,GAAAwE,GAAA1G,IAUA,OATA0G,GAAAnF,QAMAmF,EAAA1E,OAAA6F,EACAnB,EAAA9D,WAAAV,IANAwE,EAAAF,WAAA,WACAE,EAAA1E,OAAA6F,EACAnB,EAAA9D,WAAAV,MAMA,GAEA4F,sBAAA,SAAAT,GACA,GAAAX,GAAA1G,IACA0G,GAAAnF,OAKAmF,EAAAU,eAAAC,GAJAX,EAAAF,WAAA,WACAE,EAAAU,eAAAC,MAMAU,uBAAA,SAAAV,GACArH,KAAA+B,SAAAsF,EAAA7B,KACAxF,KAAAgC,OAAA,IACA,IAAA0E,GAAA1G,IACA0G,GAAAnF,QAMAmF,EAAA9D,WAAAyE,EAAApF,OACAyE,EAAAiB,UAAA,cAAAN,IANAX,EAAAF,WAAA,WACAE,EAAA9D,WAAAyE,EAAApF,OACAyE,EAAAiB,UAAA,cAAAN,UCYGW,kBAAkB,IAAIC,GAAG,SAASvH,EAAQjB,EAAOD,GC5QpDC,EAAAD,QAAA,oGD8QW,IAAI","file":"../../adapter/symcodecloud.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\r\n    translations: {\r\n        description: {\r\n            en: 'Symcode cloud adapter',\r\n            de: 'Symcode Cloud Adapter'\r\n        }\r\n    },\r\n    template: require('./template.html'),\r\n    apikey: '',\r\n    http: function() {\r\n        var that = this;\r\n        var options = {\r\n            base: this.config.url.replace(/\\/+$/, '') + '/api'\r\n        };\r\n        return options;\r\n    },\r\n    data: function () {\r\n        return {\r\n            category: null,\r\n            search: null,\r\n            items: null,\r\n            results: {},\r\n            extensions: null\r\n        }\r\n    },\r\n    watch: {\r\n        'appConfig.pick': {\r\n            handler: function (config) {\r\n                // Reload latest items when extensions have changed\r\n                var oldTerms = this.assembleTerms();\r\n                this.extensions = config.extensions;\r\n                var newTerms = this.assembleTerms();\r\n                if (oldTerms.hash !== newTerms.hash && this.results[oldTerms.hash]) {\r\n                    var items = this.results[oldTerms.hash].items;\r\n                    while (items.length > 0) {\r\n                        items.pop();\r\n                    }\r\n                    this.loadAssets(items);\r\n                }\r\n            },\r\n            immediate: true\r\n        }\r\n    },\r\n    dateFormat: 'YYYY-MM-DDTHH:mm:ss',\r\n    methods: {\r\n        assembleTerms: function () {\r\n            var terms = [],\r\n                pushTerm = function (field, operator, value) {\r\n                    terms.push({field: field, operator: operator, value: value});\r\n                };\r\n            if (this.category) {\r\n                pushTerm('category', 'exact', this.category.id);\r\n            }\r\n            if (this.search) {\r\n                pushTerm('description', 'freeform', this.search);\r\n            }\r\n            if (this.extensions && this.extensions.length) {\r\n                pushTerm('fileformat', 'matches', this.extensions.join('|'))\r\n            }\r\n            if (!terms.length) {\r\n                pushTerm('id', 'matches', '*');\r\n            }\r\n            return terms;\r\n        },\r\n        loadAssets: function (items) {\r\n            var terms = this.assembleTerms();\r\n            var query = JSON.stringify(terms);\r\n            var result = this.results[query];\r\n            if (!result) {\r\n                result = {page: 0, pages: 0, items: items || []};\r\n                result.items.total = result.items.total || result.items.length;\r\n                this.results[query] = result;\r\n            } else {\r\n                if (items && result.items !== items) {\r\n                    Array.prototype.push.apply(items, result.items);\r\n                    items.total = result.items.total;\r\n                    items.loading = result.items.loading;\r\n                    items.query = query;\r\n                    result.items = items;\r\n                }\r\n                if (result.page === result.pages) {\r\n                    return this.$promise(function (resolve) {\r\n                        resolve(result);\r\n                    });\r\n                }\r\n            }\r\n\r\n            result.items.loading = true;\r\n            result.items.query = query;\r\n\r\n            var categories = '';\r\n            var fulltext = '';\r\n\r\n            terms.forEach(function (term) {\r\n                if(term.field == 'category'){\r\n                    categories = term.value;\r\n                }\r\n                if(term.field == 'description'){\r\n                    fulltext = term.value;\r\n                }\r\n            });\r\n\r\n\r\n            this.http.get(\r\n                '/entries?page='+ (result.page + 1)+'&limit=20&filter[categories]='+categories+'&filter[fulltext]='+fulltext,\r\n                {'headers': {'apikey': this.apikey}}\r\n            ).then((function(response) {\r\n                if (result.items.query === query) {\r\n                    result.page = parseInt(response.data.current_page);\r\n                    result.pages = parseInt(response.data.page_count);\r\n                    result.items.total = parseInt(response.data.total);\r\n                    result.items.loading = false;\r\n                    response.data.data.forEach((function (asset) {\r\n                        var ext = asset.type.match('image/') ? (asset.hasOwnProperty('extension') ? asset.extension : (asset.original_name.match(/\\.([0-9a-z]+)$/i) || []).pop()) : undefined;\r\n                        var item = this.createItem({\r\n                            id: asset.hash,\r\n                            query: query,\r\n                            type: 'file',\r\n                            name: asset.name,\r\n                            title: asset.name,\r\n                            extension: ext,\r\n                            created: this.parseDate(asset.created_at),\r\n                            modified: this.parseDate(asset.changed_at),\r\n                            thumbnail: asset.media_thumb_url.replace('.png', '.jpeg')+'?width=150px',\r\n                            links: {\r\n                                open: asset.media_thumb_url+'?width=800px',\r\n                                download: asset.media_file_url\r\n                            },\r\n                            data: asset\r\n                        });\r\n                        result.items.push(item);\r\n                    }).bind(this));\r\n                }\r\n                return result;\r\n            }).bind(this));\r\n        },\r\n        setupLogin: function(loginCallback) {\r\n            var that = this;\r\n            var loginFunc = function(username, password, callback){\r\n                that.http.get('/login?username='+username+'&password='+password).then(\r\n                    function (response) {\r\n                        if(response.status === 200){\r\n                            response.data = response.json();\r\n                            if(response.data.apikey){\r\n                                that.apikey = response.data.apikey;\r\n                                callback(true);\r\n                                loginCallback(response.data.apikey);\r\n                            } else {\r\n                                // invalid auth data, remove it to prevent endless loops\r\n                                that.config.cliUsername = null;\r\n                                that.config.cliPassword = null;\r\n                                callback(false);\r\n                            }\r\n                        } else {\r\n                            // invalid auth data, remove it to prevent endless loops\r\n                            that.config.cliUsername = null;\r\n                            that.config.cliPassword = null;\r\n                            callback(false);\r\n                        }\r\n                    }\r\n                );\r\n            };\r\n\r\n            if(this.config.cliUsername && this.config.cliPassword){\r\n                loginFunc(this.config.cliUsername, this.config.cliPassword, function(){});\r\n            } else {\r\n                this.login(function(username, password, callback) {\r\n                    loginFunc(this.config.cliUsername, this.config.cliPassword, callback);\r\n                }).bind(this);\r\n            }\r\n\r\n        },\r\n        loadCategories: function(tree) {\r\n            var catId = 0;\r\n            if(tree.item && tree.item.id){\r\n                catId = tree.item.id;\r\n            }\r\n\r\n            this.http.get(\r\n                '/categories?limit=100&parent_id='+catId,\r\n                {'headers': {'apikey': this.apikey}}\r\n            ).then(function (response) {\r\n                tree.items = response.data.data.map((function(category) {\r\n                    return this.createItem({\r\n                        id: category.id,\r\n                        name: category.name,\r\n                        type: 'category',\r\n                        data: category\r\n                    });\r\n                }).bind(this));\r\n            });\r\n        }\r\n    },\r\n    events: {\r\n        'select-item': function (item) {\r\n            if (item === 'entrypoint') {\r\n                this.category = null;\r\n                this.search = null;\r\n                var that = this;\r\n                if(!that.apikey){\r\n                    that.setupLogin(function(){\r\n                        that.loadAssets().then(function(response) {\r\n                            that.items = response.items;\r\n                            that.$parent.$dispatch('select-item', this);\r\n                        });\r\n                    });\r\n                } else {\r\n                    that.loadAssets().then(function(response) {\r\n                        that.items = response.items;\r\n                        that.$parent.$dispatch('select-item', this);\r\n                    });\r\n                }\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        'load-more-items': function (results) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadAssets(results);\r\n                });\r\n            } else {\r\n                that.loadAssets(results);\r\n            }\r\n        },\r\n        'search': function (sword, results) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.search = sword;\r\n                    that.loadAssets(results);\r\n                });\r\n            } else {\r\n                that.search = sword;\r\n                that.loadAssets(results);\r\n            }\r\n            return true;\r\n        },\r\n        'category-load-items': function (tree) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadCategories(tree);\r\n                });\r\n            } else {\r\n                that.loadCategories(tree);\r\n            }\r\n        },\r\n        'category-select-item': function (tree) {\r\n            this.category = tree.item;\r\n            this.search = null;\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadAssets(tree.items);\r\n                    that.$dispatch('select-item', tree);\r\n                });\r\n            } else {\r\n                that.loadAssets(tree.items);\r\n                that.$dispatch('select-item', tree);\r\n            }\r\n\r\n        }\r\n    }\r\n};\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.AssetPickerAdapterSymcodecloud = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\r\n    translations: {\r\n        description: {\r\n            en: 'Symcode cloud adapter',\r\n            de: 'Symcode Cloud Adapter'\r\n        }\r\n    },\r\n    template: require('./template.html'),\r\n    apikey: '',\r\n    http: function() {\r\n        var that = this;\r\n        var options = {\r\n            base: this.config.url.replace(/\\/+$/, '') + '/api'\r\n        };\r\n        return options;\r\n    },\r\n    data: function () {\r\n        return {\r\n            category: null,\r\n            search: null,\r\n            items: null,\r\n            results: {},\r\n            extensions: null\r\n        }\r\n    },\r\n    watch: {\r\n        'appConfig.pick': {\r\n            handler: function (config) {\r\n                // Reload latest items when extensions have changed\r\n                var oldTerms = this.assembleTerms();\r\n                this.extensions = config.extensions;\r\n                var newTerms = this.assembleTerms();\r\n                if (oldTerms.hash !== newTerms.hash && this.results[oldTerms.hash]) {\r\n                    var items = this.results[oldTerms.hash].items;\r\n                    while (items.length > 0) {\r\n                        items.pop();\r\n                    }\r\n                    this.loadAssets(items);\r\n                }\r\n            },\r\n            immediate: true\r\n        }\r\n    },\r\n    dateFormat: 'YYYY-MM-DDTHH:mm:ss',\r\n    methods: {\r\n        assembleTerms: function () {\r\n            var terms = [],\r\n                pushTerm = function (field, operator, value) {\r\n                    terms.push({field: field, operator: operator, value: value});\r\n                };\r\n            if (this.category) {\r\n                pushTerm('category', 'exact', this.category.id);\r\n            }\r\n            if (this.search) {\r\n                pushTerm('description', 'freeform', this.search);\r\n            }\r\n            if (this.extensions && this.extensions.length) {\r\n                pushTerm('fileformat', 'matches', this.extensions.join('|'))\r\n            }\r\n            if (!terms.length) {\r\n                pushTerm('id', 'matches', '*');\r\n            }\r\n            return terms;\r\n        },\r\n        loadAssets: function (items) {\r\n            var terms = this.assembleTerms();\r\n            var query = JSON.stringify(terms);\r\n            var result = this.results[query];\r\n            if (!result) {\r\n                result = {page: 0, pages: 0, items: items || []};\r\n                result.items.total = result.items.total || result.items.length;\r\n                this.results[query] = result;\r\n            } else {\r\n                if (items && result.items !== items) {\r\n                    Array.prototype.push.apply(items, result.items);\r\n                    items.total = result.items.total;\r\n                    items.loading = result.items.loading;\r\n                    items.query = query;\r\n                    result.items = items;\r\n                }\r\n                if (result.page === result.pages) {\r\n                    return this.$promise(function (resolve) {\r\n                        resolve(result);\r\n                    });\r\n                }\r\n            }\r\n\r\n            result.items.loading = true;\r\n            result.items.query = query;\r\n\r\n            var categories = '';\r\n            var fulltext = '';\r\n\r\n            terms.forEach(function (term) {\r\n                if(term.field == 'category'){\r\n                    categories = term.value;\r\n                }\r\n                if(term.field == 'description'){\r\n                    fulltext = term.value;\r\n                }\r\n            });\r\n\r\n\r\n            this.http.get(\r\n                '/entries?page='+ (result.page + 1)+'&limit=20&filter[categories]='+categories+'&filter[fulltext]='+fulltext,\r\n                {'headers': {'apikey': this.apikey}}\r\n            ).then((function(response) {\r\n                if (result.items.query === query) {\r\n                    result.page = parseInt(response.data.current_page);\r\n                    result.pages = parseInt(response.data.page_count);\r\n                    result.items.total = parseInt(response.data.total);\r\n                    result.items.loading = false;\r\n                    response.data.data.forEach((function (asset) {\r\n                        var ext = asset.type.match('image/') ? (asset.hasOwnProperty('extension') ? asset.extension : (asset.original_name.match(/\\.([0-9a-z]+)$/i) || []).pop()) : undefined;\r\n                        var item = this.createItem({\r\n                            id: asset.hash,\r\n                            query: query,\r\n                            type: 'file',\r\n                            name: asset.name,\r\n                            title: asset.name,\r\n                            extension: ext,\r\n                            created: this.parseDate(asset.created_at),\r\n                            modified: this.parseDate(asset.changed_at),\r\n                            thumbnail: asset.media_thumb_url.replace('.png', '.jpeg')+'?width=150px',\r\n                            links: {\r\n                                open: asset.media_thumb_url+'?width=800px',\r\n                                download: asset.media_file_url\r\n                            },\r\n                            data: asset\r\n                        });\r\n                        result.items.push(item);\r\n                    }).bind(this));\r\n                }\r\n                return result;\r\n            }).bind(this));\r\n        },\r\n        setupLogin: function(loginCallback) {\r\n            var that = this;\r\n            var loginFunc = function(username, password, callback){\r\n                that.http.get('/login?username='+username+'&password='+password).then(\r\n                    function (response) {\r\n                        if(response.status === 200){\r\n                            response.data = response.json();\r\n                            if(response.data.apikey){\r\n                                that.apikey = response.data.apikey;\r\n                                callback(true);\r\n                                loginCallback(response.data.apikey);\r\n                            } else {\r\n                                // invalid auth data, remove it to prevent endless loops\r\n                                that.config.cliUsername = null;\r\n                                that.config.cliPassword = null;\r\n                                callback(false);\r\n                            }\r\n                        } else {\r\n                            // invalid auth data, remove it to prevent endless loops\r\n                            that.config.cliUsername = null;\r\n                            that.config.cliPassword = null;\r\n                            callback(false);\r\n                        }\r\n                    }\r\n                );\r\n            };\r\n\r\n            if(this.config.cliUsername && this.config.cliPassword){\r\n                loginFunc(this.config.cliUsername, this.config.cliPassword, function(){});\r\n            } else {\r\n                this.login(function(username, password, callback) {\r\n                    loginFunc(this.config.cliUsername, this.config.cliPassword, callback);\r\n                }).bind(this);\r\n            }\r\n\r\n        },\r\n        loadCategories: function(tree) {\r\n            var catId = 0;\r\n            if(tree.item && tree.item.id){\r\n                catId = tree.item.id;\r\n            }\r\n\r\n            this.http.get(\r\n                '/categories?limit=100&parent_id='+catId,\r\n                {'headers': {'apikey': this.apikey}}\r\n            ).then(function (response) {\r\n                tree.items = response.data.data.map((function(category) {\r\n                    return this.createItem({\r\n                        id: category.id,\r\n                        name: category.name,\r\n                        type: 'category',\r\n                        data: category\r\n                    });\r\n                }).bind(this));\r\n            });\r\n        }\r\n    },\r\n    events: {\r\n        'select-item': function (item) {\r\n            if (item === 'entrypoint') {\r\n                this.category = null;\r\n                this.search = null;\r\n                var that = this;\r\n                if(!that.apikey){\r\n                    that.setupLogin(function(){\r\n                        that.loadAssets().then(function(response) {\r\n                            that.items = response.items;\r\n                            that.$parent.$dispatch('select-item', this);\r\n                        });\r\n                    });\r\n                } else {\r\n                    that.loadAssets().then(function(response) {\r\n                        that.items = response.items;\r\n                        that.$parent.$dispatch('select-item', this);\r\n                    });\r\n                }\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        'load-more-items': function (results) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadAssets(results);\r\n                });\r\n            } else {\r\n                that.loadAssets(results);\r\n            }\r\n        },\r\n        'search': function (sword, results) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.search = sword;\r\n                    that.loadAssets(results);\r\n                });\r\n            } else {\r\n                that.search = sword;\r\n                that.loadAssets(results);\r\n            }\r\n            return true;\r\n        },\r\n        'category-load-items': function (tree) {\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadCategories(tree);\r\n                });\r\n            } else {\r\n                that.loadCategories(tree);\r\n            }\r\n        },\r\n        'category-select-item': function (tree) {\r\n            this.category = tree.item;\r\n            this.search = null;\r\n            var that = this;\r\n            if(!that.apikey){\r\n                that.setupLogin(function(){\r\n                    that.loadAssets(tree.items);\r\n                    that.$dispatch('select-item', tree);\r\n                });\r\n            } else {\r\n                that.loadAssets(tree.items);\r\n                that.$dispatch('select-item', tree);\r\n            }\r\n\r\n        }\r\n    }\r\n};\r\n\n},{\"./template.html\":2}],2:[function(require,module,exports){\nmodule.exports = '<div>\\n    <tree :fetch=\"fetch\" name=\"category\" :types=\"[\\'category\\']\"></tree>\\n</div>';\n},{}]},{},[1])(1)\n});\n\n","module.exports = '<div>\\n    <tree :fetch=\"fetch\" name=\"category\" :types=\"[\\'category\\']\"></tree>\\n</div>';"]}